--DIFICULTAD: Muy fácil


--1.Devuelve todas las películas

SELECT * FROM MOVIES;
--2. Devuelve todos los géneros existentes

SELECT * FROM GENRES;
--3. Devuelve la lista de todos los estudios de grabación que estén activos

SELECT * FROM STUDIOS 
WHERE STUDIO_ACTIVE IS TRUE;

--4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub

SELECT * FROM MEMBERS 
ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20;


--DIFICULTAD: Fácil


--5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.

SELECT MOVIE_DURATION,  COUNT(MOVIE_ID) AS CUENTA 
FROM MOVIES 
GROUP BY MOVIE_DURATION 
ORDER BY COUNT(MOVIE_ID) DESC, MOVIE_DURATION DESC 
LIMIT 20;

--6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.

SELECT * 
FROM MOVIES 
WHERE YEAR(MOVIE_LAUNCH_DATE) >= 2000 
AND MOVIE_NAME LIKE 'A%';

--7. Devuelve los actores nacidos un mes de Junio

SELECT * 
FROM ACTORS 
WHERE MONTH(ACTOR_BIRTH_DATE) = 6 
ORDER BY ACTOR_BIRTH_DATE ASC;

--8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.

SELECT * 
FROM ACTORS 
WHERE MONTH(ACTOR_BIRTH_DATE) <> 6 
AND ACTOR_DEAD_DATE IS NOT NULL ORDER BY ACTOR_BIRTH_DATE ASC ;

--9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos

SELECT DIRECTOR_NAME , DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, NOW())  AS EDAD 
FROM DIRECTORS
WHERE DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, NOW()) <=50
AND DIRECTOR_DEAD_DATE IS NULL ORDER BY EDAD DESC;

--10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido

SELECT ACTOR_NAME, DATEDIFF(YEAR,ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE)  AS AGE 
FROM ACTORS 
WHERE DATEDIFF(YEAR,ACTOR_BIRTH_DATE, ACTOR_DEAD_DATE) <50 
AND ACTOR_DEAD_DATE IS NOT NULL ;

--11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos

SELECT DIRECTOR_NAME--,  DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, NOW())  AS AGE 
FROM DIRECTORS
WHERE DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, NOW()) <=40 
AND DIRECTOR_DEAD_DATE IS NULL 
ORDER BY DIRECTOR_NAME;

--12. Indica la edad media de los directores vivos

SELECT AVG(DATEDIFF(YEAR,DIRECTOR_BIRTH_DATE, NOW()))  AS AVERAGE_AGE 
FROM DIRECTORS
WHERE  DIRECTOR_DEAD_DATE IS NULL;


--13. Indica la edad media de los actores que han fallecido

SELECT AVG(DATEDIFF(YEAR,ACTOR_BIRTH_DATE, NOW()))
FROM ACTORS 
WHERE  ACTOR_DEAD_DATE IS NOT NULL ;


--DIFICULTAD: Media


--14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado

SELECT m.MOVIE_NAME , s.STUDIO_NAME 
FROM MOVIES m 
INNER JOIN STUDIOS s 
ON s.STUDIO_ID = m.STUDIO_ID;

--15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015

SELECT  DISTINCT MEMBER_NAME 
FROM MEMBERS m 
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL r 
ON m.MEMBER_ID = r.MEMBER_ID 
WHERE YEAR(r.MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015;

SELECT  DISTINCT MEMBER_NAME 
FROM MEMBERS m 
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL r 
ON m.MEMBER_ID = r.MEMBER_ID 
WHERE YEAR(r.MEMBER_RENTAL_DATE)>= 2010 AND YEAR(r.MEMBER_RENTAL_DATE) <= 2015;

--16. Devuelve cuantas películas hay de cada país

SELECT COUNT(DISTINCT(m.MOVIE_ID)) AS NUMBER_OF_MOVIES, n.NATIONALITY_NAME  
FROM MOVIES m INNER JOIN NATIONALITIES n 
ON m.NATIONALITY_ID = n.NATIONALITY_ID 
GROUP BY n.NATIONALITY_NAME
ORDER BY COUNT(DISTINCT(m.MOVIE_ID)) DESC;

--17. Devuelve todas las películas que hay de género documental

SELECT * 
FROM MOVIES m INNER JOIN GENRES g
ON m.GENRE_ID = g.GENRE_ID 
WHERE g.GENRE_NAME LIKE 'Documentary';

SELECT * 
FROM MOVIES m INNER JOIN GENRES g
ON m.GENRE_ID = g.GENRE_ID 
WHERE g.GENRE_NAME = 'Documentary';

--18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos

SELECT m.MOVIE_NAME, d.DIRECTOR_NAME  
FROM MOVIES m INNER JOIN DIRECTORS d
ON m.DIRECTOR_ID = d.DIRECTOR_ID 
WHERE YEAR(d.DIRECTOR_BIRTH_DATE)>=1980 
AND d.DIRECTOR_DEAD_DATE IS NULL
ORDER BY d.DIRECTOR_NAME ASC;

--19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.

SELECT m.MEMBER_TOWN 
FROM MEMBERS m
WHERE m.MEMBER_TOWN  IN (SELECT d.DIRECTOR_BIRTH_PLACE 
						FROM DIRECTORS d);
					
SELECT
    M.MEMBER_NAME,
    D.DIRECTOR_NAME,
    D.DIRECTOR_BIRTH_PLACE
FROM
    MEMBERS M
INNER JOIN DIRECTORS D ON
    M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE

--20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo
					
SELECT m.MOVIE_NAME , YEAR(m.MOVIE_LAUNCH_DATE) AS "YEAR"
FROM MOVIES m
WHERE m.STUDIO_ID IN (SELECT s.STUDIO_ID 
						FROM STUDIOS s
						WHERE s.STUDIO_ACTIVE IS FALSE); 					

--21. Devuelve una lista de las últimas 10 películas que se han alquilado
					
SELECT m.MOVIE_NAME 
FROM MOVIES m INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mmr
ON m.MOVIE_ID = mmr.MOVIE_ID 
ORDER BY mmr.MEMBER_RENTAL_DATE LIMIT 10; 

--22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años

SELECT d.DIRECTOR_NAME , COUNT(m.MOVIE_ID) AS MOVIE_COUNT
FROM MOVIES m
INNER JOIN DIRECTORS d 
ON m.DIRECTOR_ID = d.DIRECTOR_ID 
WHERE DATEDIFF(YEAR, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE) < 41
GROUP BY d.DIRECTOR_NAME;

--23. Indica cuál es la media de duración de las películas de cada director

SELECT d.DIRECTOR_NAME , AVG(m.MOVIE_DURATION) AS MEDIA 
FROM MOVIES m
INNER JOIN DIRECTORS d 
ON m.DIRECTOR_ID = d.DIRECTOR_ID 
GROUP BY d.DIRECTOR_ID;

--24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub 
(La "fecha de ejecución" en este script es el 25-01-2019)

SELECT m.MOVIE_NAME, m.MOVIE_DURATION
FROM MOVIES m
INNER JOIN MEMBERS_MOVIE_RENTAL mmr 
ON m.MOVIE_ID = mmr.MOVIE_ID 
WHERE DATEDIFF (YEAR,mmr.MEMBER_RENTAL_DATE, '2019-01-25')<=2
GROUP BY m.MOVIE_ID 
ORDER BY m.MOVIE_DURATION ASC LIMIT 1;

-- con between 

SELECT m.MOVIE_NAME, m.MOVIE_DURATION
FROM MOVIES m
INNER JOIN MEMBERS_MOVIE_RENTAL mmr 
ON m.MOVIE_ID = mmr.MOVIE_ID 
WHERE mmr.MEMBER_RENTAL_DATE BETWEEN '2017-01-25' AND '2019-01-25'
GROUP BY m.MOVIE_ID 
ORDER BY m.MOVIE_DURATION ASC LIMIT 1;

--otra forma
SELECT m.MOVIE_NAME, m.MOVIE_DURATION
FROM MOVIES m
INNER JOIN MEMBERS_MOVIE_RENTAL mmr 
ON m.MOVIE_ID = mmr.MOVIE_ID 
WHERE DATEADD (YEAR,-2, DATE'2019-01-25')< mmr.MEMBER_RENTAL_DATE
GROUP BY m.MOVIE_ID 
ORDER BY m.MOVIE_DURATION ASC LIMIT 1;

--25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título

/*SELECT COUNT (m.MOVIE_ID)
FROM MOVIES m
WHERE YEAR(m.MOVIE_LAUNCH_DATE) BETWEEN 1960 AND 1989
AND m.MOVIE_NAME LIKE '%The%';

-- restando fechas 

SELECT COUNT (m.MOVIE_ID)
FROM MOVIES m
WHERE YEAR(m.MOVIE_LAUNCH_DATE) >= 1960 AND YEAR(m.MOVIE_LAUNCH_DATE)<=1989
AND m.MOVIE_NAME LIKE '%The%';


SELECT COUNT (m.MOVIE_ID), d.DIRECTOR_NAME --, m.MOVIE_NAME 
FROM MOVIES m
INNER JOIN DIRECTORS d ON d.DIRECTOR_ID = m.DIRECTOR_ID 
WHERE YEAR(m.MOVIE_LAUNCH_DATE) BETWEEN 1960 AND 1989
AND m.MOVIE_NAME LIKE '%THE%' OR m.MOVIE_NAME LIKE '%the%'
GROUP BY d.DIRECTOR_NAME;--, m.MOVIE_NAME; */

SELECT d.director_name, COUNT(*) AS numero_peliculas 
FROM directors d JOIN movies m
ON d.director_id = m.director_id
WHERE UPPER(m.movie_name)  LIKE '%THE%'
AND MOVIE_LAUNCH_DATE >= DATE '1960-01-01' 
AND MOVIE_LAUNCH_DATE <= DATE '1989-12-31'
GROUP BY d.director_name;


--DIFICULTAD: Difícil


--26. Lista nombre, nacionalidad y director de todas las películas

SELECT m.MOVIE_NAME , n.NATIONALITY_NAME , d.DIRECTOR_NAME 
FROM MOVIES m
INNER JOIN DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
INNER JOIN NATIONALITIES n ON n.NATIONALITY_ID = m.NATIONALITY_ID 
ORDER BY m.MOVIE_NAME;

--27. Muestra las películas con los actores que han participado en cada una de ellas

SELECT m.MOVIE_NAME , a.ACTOR_NAME 
FROM MOVIES m
INNER JOIN MOVIES_ACTORS ma ON ma.MOVIE_ID = m.MOVIE_ID 
INNER JOIN ACTORS a ON a.ACTOR_ID = ma.ACTOR_ID
ORDER BY m.MOVIE_NAME;

--28. Indica cual es el nombre del director del que más películas se han alquilado

SELECT d.DIRECTOR_NAME, COUNT(mmr.MEMBER_MOVIE_RENTAL_ID) AS NUMBER_RENTAL
FROM DIRECTORS d
INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID
INNER JOIN MEMBERS_MOVIE_RENTAL mmr ON mmr.MOVIE_ID = m.MOVIE_ID 
GROUP BY d.DIRECTOR_NAME
ORDER BY COUNT(mmr.MEMBER_MOVIE_RENTAL_ID) DESC LIMIT 1;

--DISTINTAS PELICULAS DEL MISMO DIRECTOR

SELECT d.DIRECTOR_NAME, COUNT(DISTINCT mmr.MOVIE_ID) AS NUMBER_OF_MOVIES
FROM DIRECTORS d
INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID
INNER JOIN MEMBERS_MOVIE_RENTAL mmr ON mmr.MOVIE_ID = m.MOVIE_ID 
GROUP BY d.DIRECTOR_NAME
ORDER BY COUNT(mmr.MOVIE_ID) DESC LIMIT 1;

--CON SELECT?

SELECT d.DIRECTOR_NAME
FROM DIRECTORS d
INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID 
WHERE m.MOVIE_ID =(SELECT  mmr.MOVIE_ID
FROM MEMBERS_MOVIE_RENTAL mmr 
GROUP BY MOVIE_ID
ORDER BY COUNT(mmr.MOVIE_ID) DESC LIMIT 1);

--SUBSELECT PARA COMPROBAR

SELECT  mmr.MOVIE_ID
FROM MEMBERS_MOVIE_RENTAL mmr 
GROUP BY MOVIE_ID
ORDER BY COUNT(mmr.MOVIE_ID) DESC LIMIT 1;



--29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado

SELECT SUM(a.AWARD_WIN) AS AWARDS_WIN, s.STUDIO_NAME 
FROM AWARDS a
INNER JOIN MOVIES m ON m.MOVIE_ID = a.MOVIE_ID 
INNER JOIN STUDIOS s ON s.STUDIO_ID = m.STUDIO_ID
GROUP BY s.STUDIO_NAME
ORDER BY SUM(a.AWARD_WIN) DESC;


--30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)

SELECT a.ACTOR_NAME, SUM(aw.AWARD_ALMOST_WIN) AS NEXT_TIME
FROM ACTORS a
INNER JOIN MOVIES_ACTORS ma ON ma.ACTOR_ID = a.ACTOR_ID 
INNER JOIN MOVIES m ON m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN AWARDS aw ON aw.MOVIE_ID = m.MOVIE_ID
GROUP BY a.ACTOR_NAME
ORDER BY NEXT_TIME DESC; 

--31. Indica cuantos actores y directores hicieron películas para los estudios no activos

SELECT COUNT(DISTINCT ma.ACTOR_ID) AS ACTORS, COUNT(DISTINCT m.DIRECTOR_ID) AS DIRECTORS 
FROM  MOVIES_ACTORS ma
INNER JOIN MOVIES m ON m.MOVIE_ID = ma.MOVIE_ID 
INNER JOIN STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID 
WHERE s.STUDIO_ACTIVE = FALSE;

-- con subconsulta

SELECT COUNT(DISTINCT ma.ACTOR_ID) AS ACTORS, COUNT(DISTINCT m.DIRECTOR_ID) AS DIRECTORS 
FROM  MOVIES_ACTORS ma
INNER JOIN MOVIES m ON m.MOVIE_ID = ma.MOVIE_ID 
WHERE m.STUDIO_ID  IN (SELECT s.STUDIO_ID 
		FROM STUDIOS s 
		WHERE S.STUDIO_ACTIVE = FALSE) ;

-- divide y vencerás
	
SELECT s.STUDIO_ID 
FROM STUDIOS s 
WHERE S.STUDIO_ACTIVE = FALSE;


--32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub 
--que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50

--con 2 subconsultas

SELECT DISTINCT M.MEMBER_NAME, M.MEMBER_TOWN, M.MEMBER_PHONE 
FROM MEMBERS M
WHERE M.MEMBER_ID IN (SELECT MMR.MEMBER_ID  
						FROM MEMBERS_MOVIE_RENTAL MMR
						WHERE MMR.MOVIE_ID IN (SELECT A.MOVIE_ID 
												FROM AWARDS A
												WHERE A.AWARD_NOMINATION > 150 
												AND A.AWARD_WIN < 50));

-- con inner y subconsulta

SELECT DISTINCT M.MEMBER_NAME, M.MEMBER_TOWN, M.MEMBER_PHONE 
FROM MEMBERS M
INNER JOIN MEMBERS_MOVIE_RENTAL MMR
ON M.MEMBER_ID = MMR.MEMBER_ID 
WHERE MMR.MOVIE_ID IN (SELECT A.MOVIE_ID 
						FROM AWARDS A
						WHERE A.AWARD_NOMINATION > 150 
						AND A.AWARD_WIN < 50);

-- divide y vencerás

SELECT A.MOVIE_ID 
FROM AWARDS A
WHERE A.AWARD_NOMINATION > 150 
AND A.AWARD_WIN < 50;

--con inner join

SELECT DISTINCT M.MEMBER_NAME, M.MEMBER_TOWN, M.MEMBER_PHONE 
FROM MEMBERS M
INNER JOIN MEMBERS_MOVIE_RENTAL MMR ON M.MEMBER_ID = MMR.MEMBER_ID 
INNER JOIN MOVIES MO ON MO.MOVIE_ID = MMR.MOVIE_ID 
INNER JOIN AWARDS A ON mo.MOVIE_ID = a.MOVIE_ID 
WHERE a.AWARD_NOMINATION > 150 AND a.AWARD_WIN < 50 ;

--33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)

SELECT
	D.DIRECTOR_NAME,
	D.DIRECTOR_DEAD_DATE,
	MAX(M.MOVIE_LAUNCH_DATE) AS LAST_MOVIE
FROM
	MOVIES M
INNER JOIN DIRECTORS D ON
	D.DIRECTOR_ID = M.DIRECTOR_ID
WHERE
	D.DIRECTOR_DEAD_DATE IS NOT NULL
	AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
GROUP BY D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE ;


--34. Utilizando la información de la sentencia anterior,
-- modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)

UPDATE DIRECTORS D 
SET D.DIRECTOR_DEAD_DATE = DATEADD(YEAR, 1 ,(SELECT M.MOVIE_LAUNCH_DATE  
											FROM MOVIES M
											INNER JOIN DIRECTORS D ON D.DIRECTOR_ID = M.DIRECTOR_ID 
											WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL 
											AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
											ORDER BY M.MOVIE_LAUNCH_DATE DESC
											LIMIT 1))
WHERE d.DIRECTOR_ID IN (SELECT DISTINCT D.DIRECTOR_ID  
						FROM MOVIES M
						INNER JOIN DIRECTORS D ON d.DIRECTOR_ID = M.DIRECTOR_ID 
						WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL 
						AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE);
					

--campo de pruebas
SELECT DISTINCT D.DIRECTOR_ID, D.DIRECTOR_NAME  
FROM MOVIES M
INNER JOIN DIRECTORS D ON D.DIRECTOR_ID = M.DIRECTOR_ID 
WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL 
AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE;


SELECT  DISTINCT D.DIRECTOR_DEAD_DATE,MAX(M.MOVIE_LAUNCH_DATE)  
FROM MOVIES M
INNER JOIN DIRECTORS D ON D.DIRECTOR_ID = M.DIRECTOR_ID 
WHERE D.DIRECTOR_DEAD_DATE IS NOT NULL 
AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE
GROUP BY D.DIRECTOR_DEAD_DATE ;

-- VOLVER A LAS FECHAS ANTERIORES

UPDATE DIRECTORS d SET DIRECTOR_DEAD_DATE = '1995-05-04' WHERE d.DIRECTOR_ID = 27;
UPDATE DIRECTORS d SET DIRECTOR_DEAD_DATE = '2001-04-08' WHERE d.DIRECTOR_ID = 47;

-- CON SELECT FUERA DEL DATEADD

UPDATE
	DIRECTORS 
SET
	DIRECTOR_DEAD_DATE = (
	SELECT
		DATEADD(YEAR,1,MAX(M.MOVIE_LAUNCH_DATE)) AS LAUNCH_DATE_PLUS_ONE_YEAR
	FROM
		MOVIES M
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE 
		AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID 
	GROUP BY 
		D.DIRECTOR_NAME, D.DIRECTOR_DEAD_DATE 
		)
WHERE
	DIRECTOR_ID IN (
	SELECT
		DISTINCT D.DIRECTOR_ID
	FROM
		MOVIES M
	INNER JOIN DIRECTORS D ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE)
		
--CON MERGE
MERGE

INTO
	PUBLIC.DIRECTORS D
		USING (
	SELECT
		DIRECTOR_ID,
		DATEADD(YEAR,
		1,
		MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE
	FROM
		PUBLIC.DIRECTORS D
	INNER JOIN PUBLIC.MOVIES M ON
		D.DIRECTOR_ID = M.DIRECTOR_ID
	WHERE
		D.DIRECTOR_DEAD_DATE IS NOT NULL
		AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE
	GROUP BY
		D.DIRECTOR_ID
        ) TOT(DIRECTOR_ID,
	DIRECTOR_DEAD_DATE) ON
	D.DIRECTOR_ID = TOT.DIRECTOR_ID
	WHEN MATCHED THEN
UPDATE
SET
	D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE
 


DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)


35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película

SELECT
	GROUPID.DIRECTOR_NAME,
	GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME
FROM
	(
	SELECT
		COUNT(G.GENRE_NAME) AS NUM_MOVIES,
		D.DIRECTOR_ID,
		D.DIRECTOR_NAME,
		G.GENRE_ID,
		G.GENRE_NAME
	FROM
		MOVIES M
	INNER JOIN GENRES AS G ON
		M.GENRE_ID = G.GENRE_ID
	INNER JOIN DIRECTORS D ON
		M.DIRECTOR_ID = D.DIRECTOR_ID
	GROUP BY
		G.GENRE_ID,
		D.DIRECTOR_ID
	ORDER BY
		D.DIRECTOR_ID) GROUPID
INNER JOIN (
	SELECT
		DIRECTOR_ID,
		MAX(NUM_MOVIES) NUM_MOVIES
	FROM
		(
		SELECT
			COUNT(G.GENRE_NAME) AS NUM_MOVIES,
			D.DIRECTOR_ID,
			D.DIRECTOR_NAME,
			G.GENRE_ID,
			G.GENRE_NAME
		FROM
			MOVIES M
		INNER JOIN GENRES AS G ON
			M.GENRE_ID = G.GENRE_ID
		INNER JOIN DIRECTORS D ON
			M.DIRECTOR_ID = D.DIRECTOR_ID
		GROUP BY
			G.GENRE_ID,
			D.DIRECTOR_ID
		ORDER BY
			D.DIRECTOR_ID)
	GROUP BY
		DIRECTOR_ID) MAXVAL ON
	GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID
	AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES
GROUP BY
	GROUPID.DIRECTOR_NAME;

36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas

SELECT
	NATIONALITIESCOUNT.STUDIO_NAME,
	GROUP_CONCAT(NATIONALITIESCOUNT.NATIONALITY_NAME) AS NATIONALITY_NAME
FROM
	(
	SELECT
		S.STUDIO_ID,
		S.STUDIO_NAME,
		N.NATIONALITY_ID,
		N.NATIONALITY_NAME,
		COUNT(N.NATIONALITY_ID) AS NUM_NATIONALITIES
	FROM
		MOVIES M
	INNER JOIN STUDIOS S ON	M.STUDIO_ID = S.STUDIO_ID
	INNER JOIN NATIONALITIES N ON M.NATIONALITY_ID = N.NATIONALITY_ID
	GROUP BY
		S.STUDIO_ID,
		N.NATIONALITY_ID
	ORDER BY
		S.STUDIO_ID) NATIONALITIESCOUNT
INNER JOIN
(
	SELECT
		STUDIO_ID ,
		MAX(NUM_NATIONALITIES) AS MAX_NATIONALITIES
	FROM
		(
		SELECT
			S.STUDIO_ID,
			S.STUDIO_NAME,
			N.NATIONALITY_ID,
			N.NATIONALITY_NAME,
			COUNT(N.NATIONALITY_ID) AS NUM_NATIONALITIES
		FROM
			MOVIES M
		INNER JOIN STUDIOS S ON	M.STUDIO_ID = S.STUDIO_ID
		INNER JOIN NATIONALITIES N ON M.NATIONALITY_ID = N.NATIONALITY_ID
		GROUP BY
			S.STUDIO_ID,
			N.NATIONALITY_ID
		ORDER BY
			S.STUDIO_ID)
	GROUP BY
		STUDIO_ID)MAXNATIONALITY 
ON
	NATIONALITIESCOUNT.NUM_NATIONALITIES = MAXNATIONALITY.MAX_NATIONALITIES
	AND NATIONALITIESCOUNT.STUDIO_ID = MAXNATIONALITY.STUDIO_ID
GROUP BY
	NATIONALITIESCOUNT.STUDIO_NAME


37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad


SELECT M.MOVIE_NAME , MB.MEMBER_NAME , MIN(MMR.MEMBER_RENTAL_DATE) , M.NATIONALITY_ID , MB.MEMBER_PHONE 
FROM MOVIES M
INNER JOIN MEMBERS_MOVIE_RENTAL MMR ON M.MOVIE_ID = MMR.MOVIE_ID 
INNER JOIN MEMBERS MB ON MB.MEMBER_ID = MMR.MEMBER_ID 
GROUP BY MB.MEMBER_NAME , M.MOVIE_NAME, M.NATIONALITY_ID , MB.MEMBER_PHONE 

